{"ast":null,"code":"import { ADDED, ALLCOMPLETED, CLEARCOMPLETED, COLORSELECTED, DELETED, TOGGLED } from \"./actionTypes\";\nimport initialState from \"./initialState\";\n\nconst nextTodoId = todos => {\n  const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1);\n  return maxId + 1;\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADDED:\n      return [...state, {\n        id: nextTodoId(state),\n        text: action.payload,\n        completed: false\n      }];\n\n    case TOGGLED:\n      return state.map(todo => {\n        if (todo.id !== action.payload) {\n          return todo;\n        }\n\n        return { ...todo,\n          completed: !todo.completed\n        };\n      });\n\n    case COLORSELECTED:\n      const {\n        todoId,\n        color\n      } = action.payload;\n      return state.map(todo => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return { ...todo,\n          color: color\n        };\n      });\n\n    case DELETED:\n      return state.filter(todo => todo.id !== action.payload);\n\n    case ALLCOMPLETED:\n      return state.map(todo => {\n        return { ...todo,\n          completed: true\n        };\n      });\n\n    case CLEARCOMPLETED:\n      return state.filter(todo => !todo.completed);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["H:/think-in-a-redux-way/src/redux/todos/reducer.js"],"names":["ADDED","ALLCOMPLETED","CLEARCOMPLETED","COLORSELECTED","DELETED","TOGGLED","initialState","nextTodoId","todos","maxId","reduce","todo","Math","max","id","reducer","state","action","type","text","payload","completed","map","todoId","color","filter"],"mappings":"AAAA,SACIA,KADJ,EAEIC,YAFJ,EAGIC,cAHJ,EAIIC,aAJJ,EAKIC,OALJ,EAMIC,OANJ,QAOO,eAPP;AAQA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1B,QAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACD,KAAD,EAAQE,IAAR,KAAiBC,IAAI,CAACC,GAAL,CAASF,IAAI,CAACG,EAAd,EAAkBL,KAAlB,CAA9B,EAAwD,CAAC,CAAzD,CAAd;AACA,SAAOA,KAAK,GAAG,CAAf;AACH,CAHD;;AAKA,MAAMM,OAAO,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBV,YAAyB;AAAA,MAAXW,MAAW;;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKlB,KAAL;AACI,aAAO,CACH,GAAGgB,KADA,EAEH;AACIF,QAAAA,EAAE,EAAEP,UAAU,CAACS,KAAD,CADlB;AAEIG,QAAAA,IAAI,EAAEF,MAAM,CAACG,OAFjB;AAGIC,QAAAA,SAAS,EAAE;AAHf,OAFG,CAAP;;AASJ,SAAKhB,OAAL;AACI,aAAOW,KAAK,CAACM,GAAN,CAAWX,IAAD,IAAU;AACvB,YAAIA,IAAI,CAACG,EAAL,KAAYG,MAAM,CAACG,OAAvB,EAAgC;AAC5B,iBAAOT,IAAP;AACH;;AAED,eAAO,EACH,GAAGA,IADA;AAEHU,UAAAA,SAAS,EAAE,CAACV,IAAI,CAACU;AAFd,SAAP;AAIH,OATM,CAAP;;AAWJ,SAAKlB,aAAL;AACI,YAAM;AAAEoB,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAoBP,MAAM,CAACG,OAAjC;AACA,aAAOJ,KAAK,CAACM,GAAN,CAAWX,IAAD,IAAU;AACvB,YAAIA,IAAI,CAACG,EAAL,KAAYS,MAAhB,EAAwB;AACpB,iBAAOZ,IAAP;AACH;;AACD,eAAO,EACH,GAAGA,IADA;AAEHa,UAAAA,KAAK,EAAEA;AAFJ,SAAP;AAIH,OARM,CAAP;;AAUJ,SAAKpB,OAAL;AACI,aAAOY,KAAK,CAACS,MAAN,CAAcd,IAAD,IAAUA,IAAI,CAACG,EAAL,KAAYG,MAAM,CAACG,OAA1C,CAAP;;AAEJ,SAAKnB,YAAL;AACI,aAAOe,KAAK,CAACM,GAAN,CAAWX,IAAD,IAAU;AACvB,eAAO,EACH,GAAGA,IADA;AAEHU,UAAAA,SAAS,EAAE;AAFR,SAAP;AAIH,OALM,CAAP;;AAOJ,SAAKnB,cAAL;AACI,aAAOc,KAAK,CAACS,MAAN,CAAcd,IAAD,IAAU,CAACA,IAAI,CAACU,SAA7B,CAAP;;AAEJ;AACI,aAAOL,KAAP;AAlDR;AAoDH,CArDD;;AAuDA,eAAeD,OAAf","sourcesContent":["import {\r\n    ADDED,\r\n    ALLCOMPLETED,\r\n    CLEARCOMPLETED,\r\n    COLORSELECTED,\r\n    DELETED,\r\n    TOGGLED,\r\n} from \"./actionTypes\";\r\nimport initialState from \"./initialState\";\r\n\r\nconst nextTodoId = (todos) => {\r\n    const maxId = todos.reduce((maxId, todo) => Math.max(todo.id, maxId), -1);\r\n    return maxId + 1;\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADDED:\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: nextTodoId(state),\r\n                    text: action.payload,\r\n                    completed: false,\r\n                },\r\n            ];\r\n\r\n        case TOGGLED:\r\n            return state.map((todo) => {\r\n                if (todo.id !== action.payload) {\r\n                    return todo;\r\n                }\r\n\r\n                return {\r\n                    ...todo,\r\n                    completed: !todo.completed,\r\n                };\r\n            });\r\n\r\n        case COLORSELECTED:\r\n            const { todoId, color } = action.payload;\r\n            return state.map((todo) => {\r\n                if (todo.id !== todoId) {\r\n                    return todo;\r\n                }\r\n                return {\r\n                    ...todo,\r\n                    color: color,\r\n                };\r\n            });\r\n\r\n        case DELETED:\r\n            return state.filter((todo) => todo.id !== action.payload);\r\n\r\n        case ALLCOMPLETED:\r\n            return state.map((todo) => {\r\n                return {\r\n                    ...todo,\r\n                    completed: true,\r\n                };\r\n            });\r\n\r\n        case CLEARCOMPLETED:\r\n            return state.filter((todo) => !todo.completed);\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}